<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_JOB_NUMBER</name>
          <description>Takes the value of the Maven Java Build job in the pipeline and uses it to retrieve the artifact created</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ALTERNATE_REPO_URL</name>
          <description>A URL that differs from the distribution management in the pom.xml</description>
          <defaultValue>{{ alternate_repo }}</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;MVN BUILD JOB NUMBER = $BUILD_JOB_NUMBER&quot;
echo &quot;ALT REPO = $ALTERNATE_REPO_URL&quot;

APP_HOSTNAME={{ dev_application_host_url }}
APP_NAME={{ maven_artifact_id }}
APP_GIT={{ git_url }}
APP_GIT_REF={{ git_branch }}
APP_GIT_CONTEXT_DIR={{ git_context }}
OSE_SERVER={{ openshift_server }}
CERT_PATH=
DEVEL_PROJ_NAME={{ openshift_dev_project }}

set +x
oc login -u$USER_NAME -p$USER_PASSWD --server=$OSE_SERVER --certificate-authority=$CERT_PATH
set -x

oc project $DEVEL_PROJ_NAME

#Is this a new deployment or an existing app? Decide based on whether the project is empty or not
#If BuildConfig exists, assume that the app is already deployed and we need a rebuild

BUILD_CONFIG=`oc get bc | tail -1 | awk &apos;{print $1}&apos;`

if [ -z &quot;$BUILD_CONFIG&quot; -o &quot;$BUILD_CONFIG&quot; == &quot;NAME&quot; ]; then

# no app found so create a new one
  echo &quot;Create a new app&quot;
  oc new-app --template=eap64-basic-s2i -p \
  APPLICATION_NAME=$APP_NAME,HOSTNAME_HTTP=$APP_HOSTNAME,SOURCE_REPOSITORY_URL=$APP_GIT,SOURCE_REPOSITORY_REF=$APP_GIT_REF,CONTEXT_DIR=$APP_GIT_CONTEXT_DIR\
    -l name=$APP_NAME

  CANCEL_BUILD_RESULT=`oc cancel-build $APP_NAME-1`
  echo &quot;Cancel Result: $CANCEL_BUILD_RESULT&quot;
 
  BUILD_CONFIG=$APP_NAME
fi
 
# Start a new build
echo &quot;Triggering application build and deployment&quot;
BUILD_ID=`oc start-build ${BUILD_CONFIG} --env=BUILD_JOB_NUMBER=$BUILD_JOB_NUMBER,REPO_URL=$ALTERNATE_REPO_URL`
  

echo &quot;Waiting for build to start&quot;
rc=1
attempts=25
count=0
while [ $rc -ne 0 -a $count -lt $attempts ]; do
  status=`oc get build ${BUILD_ID} --template &apos;{{'{{'}}.status.phase}}&apos;`
  if [[ $status == &quot;Failed&quot; || $status == &quot;Error&quot; || $status == &quot;Canceled&quot; ]]; then
    echo &quot;Fail: Build completed with unsuccessful status: ${status}&quot;
    exit 1
  fi 
  if [ $status == &quot;Complete&quot; ]; then
    echo &quot;Build completed successfully, will test deployment next&quot;
    rc=0
  fi
  
  if [ $status == &quot;Running&quot; ]; then
    echo &quot;Build started&quot;
    rc=0
  fi
  
  if [ $status == &quot;Pending&quot; ]; then
    count=$(($count+1))
    echo &quot;Attempt $count/$attempts&quot;
    sleep 5
  fi
done

# stream the logs for the build that just started
oc logs $BUILD_ID-build

sleep 5

echo &quot;Checking build result status&quot;
rc=1
count=0
attempts=100
while [ $rc -ne 0 -a $count -lt $attempts ]; do
  status=`oc get build ${BUILD_ID} --template &apos;{{'{{'}}.status.phase}}&apos;`
  if [[ $status == &quot;Failed&quot; || $status == &quot;Error&quot; || $status == &quot;Canceled&quot; ]]; then
    echo &quot;Fail: Build completed with unsuccessful status: ${status}&quot;
    exit 1
  fi

  if [ $status == &quot;Complete&quot; ]; then
    echo &quot;Build completed successfully, will test deployment next&quot;
    rc=0
  else 
    count=$(($count+1))
    echo &quot;Attempt $count/$attempts&quot;
    sleep 5
  fi
done

if [ $rc -ne 0 ]; then
    echo &quot;Fail: Build did not complete in a reasonable period of time&quot;
    exit 1
fi


echo &quot;Checking build result status&quot;
rc=1
count=0
attempts=100
while [ $rc -ne 0 -a $count -lt $attempts ]; do
  status=`oc get build ${BUILD_ID} -t &apos;{{'{{'}}.status.phase}}&apos;`
  if [[ $status == &quot;Failed&quot; || $status == &quot;Error&quot; || $status == &quot;Canceled&quot; ]]; then
    echo &quot;Fail: Build completed with unsuccessful status: ${status}&quot;
    exit 1
  fi

  if [ $status == &quot;Complete&quot; ]; then
    echo &quot;Build completed successfully, will test deployment next&quot;
    rc=0
  else 
    count=$(($count+1))
    echo &quot;Attempt $count/$attempts&quot;
    sleep 5
  fi
done

if [ $rc -ne 0 ]; then
    echo &quot;Fail: Build did not complete in a reasonable period of time&quot;
    exit 1
fi

# scale up the test deployment
RC_ID=`oc get rc | tail -1 | awk &apos;{print $1}&apos;`

echo &quot;Scaling up new deployment $test_rc_id&quot;
oc scale --replicas=1 rc $RC_ID
sleep 8


echo &quot;Checking for successful test deployment at $HOSTNAME&quot;
set +e
RC=0
count=0
attempts=100
while [ $RC -ne 200 -a $count -lt $attempts ]; do
  RC=`curl --connect-timeout 2 -I --write-out %{http_code} -s --output /dev/null $APP_HOSTNAME`
  if [ $RC == 200 ]; then
    break
  fi
  count=$(($count+1))
  echo &quot;Attempt $count/$attempts&quot;
  sleep 5
done
set -e

if [ $RC -ne 200 ]; then
    echo &quot;Failed to access test deployment, aborting roll out. &quot; $RC
    exit 1
fi


################################################################################
##Include development test scripts here and fail with exit 1 if the tests fail##
################################################################################</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.BuildTrigger>
      <childProjects>TM-Test-EAP</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.8">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>openshiftId</credentialsId>
          <usernameVariable>USER_NAME</usernameVariable>
          <passwordVariable>USER_PASSWD</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>
