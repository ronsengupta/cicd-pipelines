import java.util.Collections;

import static java.util.UUID.randomUUID
import jenkins.model.*
import org.jenkinsci.lib.configprovider.model.Config
import org.jenkinsci.plugins.configfiles.maven.GlobalMavenSettingsConfig
import org.jenkinsci.plugins.configfiles.maven.security.ServerCredentialMapping;
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl;
import hudson.util.Secret;

uuid = randomUUID() as String

println uuid

String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\
<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\
          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\
\n\
  <pluginGroups>\n\
  </pluginGroups>\n\
            \n\
  <proxies>\n\
  </proxies>\n\
\n\
  <servers>\n\
  </servers>\n\
\n\
  <mirrors>\n\
   <mirror>\n\
      <id>nexus</id>\n\
      <mirrorOf>*</mirrorOf>\n\
      <url>{{ nexus_mirror }} </url>\n\
    </mirror>\n\
  </mirrors>\n\
\n\
  <profiles>\n\
  </profiles>\n\
\n\
\n\
</settings>" 

ServerCredentialMapping useNexusCredentials = new ServerCredentialMapping("nexus", "nexusId")
java.util.List<ServerCredentialMapping> credentialMappingList = new java.util.ArrayList<ServerCredentialMapping>()
credentialMappingList.add(useNexusCredentials)

GlobalMavenSettingsConfig config = new GlobalMavenSettingsConfig("{{ mvnSettingsId }}", "Custom MVN settings", "global settings", content, GlobalMavenSettingsConfig.isReplaceAllDefault, credentialMappingList);

domain = Domain.global()
org.jenkinsci.lib.configprovider.ConfigProvider provider = Jenkins.instance.getExtensionList('org.jenkinsci.lib.configprovider.ConfigProvider')[0];
println provider;


println Jenkins.instance.getExtensionList('org.jenkinsci.lib.configprovider.ConfigProvider')


provider.save(config)
